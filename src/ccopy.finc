!> \brief \b CCOPY
!
!  =========== DOCUMENTATION ===========
!
! Online html documentation available at
!            http://www.netlib.org/lapack/explore-html/
!
!  Definition:
!  ===========
!
!       SUBROUTINE CCOPY(N,CX,INCX,CY,INCY)
!
!       .. Scalar Arguments ..
!       INTEGER,intent(in)  ::  INCX,INCY,N
!       ..
!       .. Array Arguments ..
!       COMPLEX,intent(in)  ::  CX(*)
!       COMPLEX,intent(out) ::  CY(*)
!       ..
!
!
!> \par Purpose:
!  =============
!>
!> \verbatim
!>
!>    CCOPY copies a vector x to a vector y.
!> \endverbatim
!
!  Arguments:
!  ==========
!
!> \param[in] N
!> \verbatim
!>          N is INTEGER
!>         number of elements in input vector(s)
!> \endverbatim
!>
!> \param[in] CX
!> \verbatim
!>          CX is COMPLEX array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
!> \endverbatim
!>
!> \param[in] INCX
!> \verbatim
!>          INCX is INTEGER
!>         storage spacing between elements of CX
!> \endverbatim
!>
!> \param[out] CY
!> \verbatim
!>          CY is COMPLEX array, dimension ( 1 + ( N - 1 )*abs( INCY ) )
!> \endverbatim
!>
!> \param[in] INCY
!> \verbatim
!>          INCY is INTEGER
!>         storage spacing between elements of CY
!> \endverbatim
!
!  Authors:
!  ========
!
!> \author Univ. of Tennessee
!> \author Univ. of California Berkeley
!> \author Univ. of Colorado Denver
!> \author NAG Ltd.
!
!> \date November 2017
!
!> \ingroup complex_blas_level1
!
!> \par Further Details:
!  =====================
!>
!> \verbatim
!>
!>     jack dongarra, linpack, 3/11/78.
!>     modified 12/3/93, array(1) declarations changed to array(*)
!> \endverbatim
!>
!  =====================================================================
subroutine ccopy(n,cx,incx,cy,incy)
implicit none
!
!  -- Reference BLAS level1 routine (version 3.8.0) --
!  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
!  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
!     November 2017
!
!     .. Scalar Arguments ..
      integer,intent(in)  :: incx,incy,n
!     ..
!     .. Array Arguments ..
      complex,intent(in)  :: cx(*)
      complex,intent(out) :: cy(*)
!     ..
!  =====================================================================
 
!     .. Local Scalars ..
      integer i,ix,iy
!     ..
      if (n.le.0) return
      if (incx.eq.1 .and. incy.eq.1) then
 
!        code for both increments equal to 1
 
         cy(1:n) = cx(1:n)
      else
 
!        code for unequal increments or equal increments not equal to 1
 
         ix = 1
         iy = 1
         if (incx.lt.0) ix = (-n+1)*incx + 1
         if (incy.lt.0) iy = (-n+1)*incy + 1
         do i = 1,n
            cy(iy) = cx(ix)
            ix = ix + incx
            iy = iy + incy
         enddo
      endif
end subroutine ccopy
! JSU: N is not the size of X and Y it is the number of elements copied from X to Y
! JSU: as-is CY and CX are assumed of sufficient size for the copies to be in bounds
! JSU: for the simple case where the increments are 1 and N is the size of both arrays a statement of the form X=Y is OK in F90
!      and in other cases simple array syntax statements can replace a call to this procedure
