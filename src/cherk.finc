!> \brief \b CHERK
!
!  =========== DOCUMENTATION ===========
!
! Online html documentation available at
!            http://www.netlib.org/lapack/explore-html/
!
!  Definition:
!  ===========
!
!       SUBROUTINE CHERK(UPLO,TRANS,N,K,ALPHA,A,LDA,BETA,C,LDC)
!
!       .. Scalar Arguments ..
!       REAL ALPHA,BETA
!       INTEGER K,LDA,LDC,N
!       CHARACTER TRANS,UPLO
!       ..
!       .. Array Arguments ..
!       COMPLEX A(LDA,*),C(LDC,*)
!       ..
!
!
!> \par Purpose:
!  =============
!>
!> \verbatim
!>
!> CHERK  performs one of the hermitian rank k operations
!>
!>    C := alpha*A*A**H + beta*C,
!>
!> or
!>
!>    C := alpha*A**H*A + beta*C,
!>
!> where  alpha and beta  are  real scalars,  C is an  n by n  hermitian
!> matrix and  A  is an  n by k  matrix in the  first case and a  k by n
!> matrix in the second case.
!> \endverbatim
!
!  Arguments:
!  ==========
!
!> \param[in] UPLO
!> \verbatim
!>          UPLO is CHARACTER*1
!>           On  entry,   UPLO  specifies  whether  the  upper  or  lower
!>           triangular  part  of the  array  C  is to be  referenced  as
!>           follows:
!>
!>              UPLO = 'U' or 'u'   Only the  upper triangular part of  C
!>                                  is to be referenced.
!>
!>              UPLO = 'L' or 'l'   Only the  lower triangular part of  C
!>                                  is to be referenced.
!> \endverbatim
!>
!> \param[in] TRANS
!> \verbatim
!>          TRANS is CHARACTER*1
!>           On entry,  TRANS  specifies the operation to be performed as
!>           follows:
!>
!>              TRANS = 'N' or 'n'   C := alpha*A*A**H + beta*C.
!>
!>              TRANS = 'C' or 'c'   C := alpha*A**H*A + beta*C.
!> \endverbatim
!>
!> \param[in] N
!> \verbatim
!>          N is INTEGER
!>           On entry,  N specifies the order of the matrix C.  N must be
!>           at least zero.
!> \endverbatim
!>
!> \param[in] K
!> \verbatim
!>          K is INTEGER
!>           On entry with  TRANS = 'N' or 'n',  K  specifies  the number
!>           of  columns   of  the   matrix   A,   and  on   entry   with
!>           TRANS = 'C' or 'c',  K  specifies  the number of rows of the
!>           matrix A.  K must be at least zero.
!> \endverbatim
!>
!> \param[in] ALPHA
!> \verbatim
!>          ALPHA is REAL
!>           On entry, ALPHA specifies the scalar alpha.
!> \endverbatim
!>
!> \param[in] A
!> \verbatim
!>          A is COMPLEX array, dimension ( LDA, ka ), where ka is
!>           k  when  TRANS = 'N' or 'n',  and is  n  otherwise.
!>           Before entry with  TRANS = 'N' or 'n',  the  leading  n by k
!>           part of the array  A  must contain the matrix  A,  otherwise
!>           the leading  k by n  part of the array  A  must contain  the
!>           matrix A.
!> \endverbatim
!>
!> \param[in] LDA
!> \verbatim
!>          LDA is INTEGER
!>           On entry, LDA specifies the first dimension of A as declared
!>           in  the  calling  (sub)  program.   When  TRANS = 'N' or 'n'
!>           then  LDA must be at least  max( 1, n ), otherwise  LDA must
!>           be at least  max( 1, k ).
!> \endverbatim
!>
!> \param[in] BETA
!> \verbatim
!>          BETA is REAL
!>           On entry, BETA specifies the scalar beta.
!> \endverbatim
!>
!> \param[in,out] C
!> \verbatim
!>          C is COMPLEX array, dimension ( LDC, N )
!>           Before entry  with  UPLO = 'U' or 'u',  the leading  n by n
!>           upper triangular part of the array C must contain the upper
!>           triangular part  of the  hermitian matrix  and the strictly
!>           lower triangular part of C is not referenced.  On exit, the
!>           upper triangular part of the array  C is overwritten by the
!>           upper triangular part of the updated matrix.
!>           Before entry  with  UPLO = 'L' or 'l',  the leading  n by n
!>           lower triangular part of the array C must contain the lower
!>           triangular part  of the  hermitian matrix  and the strictly
!>           upper triangular part of C is not referenced.  On exit, the
!>           lower triangular part of the array  C is overwritten by the
!>           lower triangular part of the updated matrix.
!>           Note that the imaginary parts of the diagonal elements need
!>           not be set,  they are assumed to be zero,  and on exit they
!>           are set to zero.
!> \endverbatim
!>
!> \param[in] LDC
!> \verbatim
!>          LDC is INTEGER
!>           On entry, LDC specifies the first dimension of C as declared
!>           in  the  calling  (sub)  program.   LDC  must  be  at  least
!>           max( 1, n ).
!> \endverbatim
!
!  Authors:
!  ========
!
!> \author Univ. of Tennessee
!> \author Univ. of California Berkeley
!> \author Univ. of Colorado Denver
!> \author NAG Ltd.
!
!> \date December 2016
!
!> \ingroup complex_blas_level3
!
!> \par Further Details:
!  =====================
!>
!> \verbatim
!>
!>  Level 3 Blas routine.
!>
!>  -- Written on 8-February-1989.
!>     Jack Dongarra, Argonne National Laboratory.
!>     Iain Duff, AERE Harwell.
!>     Jeremy Du Croz, Numerical Algorithms Group Ltd.
!>     Sven Hammarling, Numerical Algorithms Group Ltd.
!>
!>  -- Modified 8-Nov-93 to set C(J,J) to REAL( C(J,J) ) when BETA = 1.
!>     Ed Anderson, Cray Research Inc.
!> \endverbatim
!>
!  =====================================================================
       SUBROUTINE CHERK(UPLO,TRANS,N,K,ALPHA,A,LDA,BETA,C,LDC)
      implicit none
!
!  -- Reference BLAS level3 routine (version 3.7.0) --
!  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
!  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
!     December 2016
!
!     .. Scalar Arguments ..
      REAL,intent(in)       :: ALPHA,BETA
      INTEGER,intent(in)    :: K,LDA,LDC,N
      CHARACTER,intent(in)  :: TRANS,UPLO
!     ..
!     .. Array Arguments ..
      COMPLEX,intent(in)    :: A(LDA,*)
      COMPLEX,intent(inout) :: C(LDC,*)
!     ..
!
!  =====================================================================
!
!     .. External Functions ..
!     ..
!     .. External Subroutines ..
!     ..
!     .. Intrinsic Functions ..
      INTRINSIC CMPLX,CONJG,MAX,REAL
!     ..
!     .. Local Scalars ..
      COMPLEX TEMP
      REAL RTEMP
      INTEGER I,INFO,J,L,NROWA
      LOGICAL UPPER
!     ..
!     .. Parameters ..
      REAL ONE,ZERO
      PARAMETER (ONE=1.0E+0,ZERO=0.0E+0)
!     ..
!
!     Test the input parameters.
!
      IF (LSAME(TRANS,'N')) THEN
          NROWA = N
      ELSE
          NROWA = K
      endif
      UPPER = LSAME(UPLO,'U')
!
      INFO = 0
      IF ((.NOT.UPPER) .AND. (.NOT.LSAME(UPLO,'L'))) THEN
          INFO = 1
      elseif ((.NOT.LSAME(TRANS,'N')) .AND.  (.NOT.LSAME(TRANS,'C'))) THEN
          INFO = 2
      elseif (N.LT.0) THEN
          INFO = 3
      elseif (K.LT.0) THEN
          INFO = 4
      elseif (LDA.LT.MAX(1,NROWA)) THEN
          INFO = 7
      elseif (LDC.LT.MAX(1,N)) THEN
          INFO = 10
      endif
      IF (INFO.NE.0) THEN
          CALL XERBLA('CHERK ',INFO)
          RETURN
      endif
!
!     Quick return if possible.
!
      IF ((N.EQ.0) .OR. (((ALPHA.EQ.ZERO).OR.  (K.EQ.0)).AND. (BETA.EQ.ONE))) RETURN
!
!     And when  alpha.eq.zero.
!
      IF (ALPHA.EQ.ZERO) THEN
          IF (UPPER) THEN
              IF (BETA.EQ.ZERO) THEN
                  DO J = 1,N
                      DO I = 1,J
                          C(I,J) = ZERO
                      enddo
                  enddo
              ELSE
                  DO J = 1,N
                      DO I = 1,J - 1
                          C(I,J) = BETA*C(I,J)
                      enddo
                      C(J,J) = BETA*REAL(C(J,J))
                  enddo
              endif
          ELSE
              IF (BETA.EQ.ZERO) THEN
                  DO J = 1,N
                      DO I = J,N
                          C(I,J) = ZERO
                      enddo
                  enddo
              ELSE
                  DO J = 1,N
                      C(J,J) = BETA*REAL(C(J,J))
                      DO I = J + 1,N
                          C(I,J) = BETA*C(I,J)
                      enddo
                  enddo
              endif
          endif
          RETURN
      endif
!
!     Start the operations.
!
      IF (LSAME(TRANS,'N')) THEN
!
!        Form  C := alpha*A*A**H + beta*C.
!
          IF (UPPER) THEN
              DO J = 1,N
                  IF (BETA.EQ.ZERO) THEN
                      C(1:J,J) = ZERO
                  elseif (BETA.NE.ONE) THEN
                      DO I = 1,J - 1
                          C(I,J) = BETA*C(I,J)
                      enddo
                      C(J,J) = BETA*REAL(C(J,J))
                  ELSE
                      C(J,J) = REAL(C(J,J))
                  endif
                  DO L = 1,K
                      IF (A(J,L).NE.CMPLX(ZERO)) THEN
                          TEMP = ALPHA*CONJG(A(J,L))
                          DO I = 1,J - 1
                              C(I,J) = C(I,J) + TEMP*A(I,L)
                          enddo
                          C(J,J) = REAL(C(J,J)) + REAL(TEMP*A(I,L))
                      endif
                  enddo
              enddo
          ELSE
              DO J = 1,N
                  IF (BETA.EQ.ZERO) THEN
                      DO I = J,N
                          C(I,J) = ZERO
                      enddo
                  elseif (BETA.NE.ONE) THEN
                      C(J,J) = BETA*REAL(C(J,J))
                      DO I = J + 1,N
                          C(I,J) = BETA*C(I,J)
                      enddo
                  ELSE
                      C(J,J) = REAL(C(J,J))
                  endif
                  DO L = 1,K
                      IF (A(J,L).NE.CMPLX(ZERO)) THEN
                          TEMP = ALPHA*CONJG(A(J,L))
                          C(J,J) = REAL(C(J,J)) + REAL(TEMP*A(J,L))
                          DO I = J + 1,N
                              C(I,J) = C(I,J) + TEMP*A(I,L)
                          enddo
                      endif
                  enddo
              enddo
          endif
      ELSE
!
!        Form  C := alpha*A**H*A + beta*C.
!
          IF (UPPER) THEN
              DO J = 1,N
                  DO I = 1,J - 1
                      TEMP = ZERO
                      DO L = 1,K
                          TEMP = TEMP + CONJG(A(L,I))*A(L,J)
                      enddo
                      IF (BETA.EQ.ZERO) THEN
                          C(I,J) = ALPHA*TEMP
                      ELSE
                          C(I,J) = ALPHA*TEMP + BETA*C(I,J)
                      endif
                  enddo
                  RTEMP = ZERO
                  DO L = 1,K
                      RTEMP = RTEMP + CONJG(A(L,J))*A(L,J)
                  enddo
                  IF (BETA.EQ.ZERO) THEN
                      C(J,J) = ALPHA*RTEMP
                  ELSE
                      C(J,J) = ALPHA*RTEMP + BETA*REAL(C(J,J))
                  endif
              enddo
          ELSE
              DO J = 1,N
                  RTEMP = ZERO
                  DO L = 1,K
                      RTEMP = RTEMP + CONJG(A(L,J))*A(L,J)
                  enddo
                  IF (BETA.EQ.ZERO) THEN
                      C(J,J) = ALPHA*RTEMP
                  ELSE
                      C(J,J) = ALPHA*RTEMP + BETA*REAL(C(J,J))
                  endif
                  DO I = J + 1,N
                      TEMP = ZERO
                      DO L = 1,K
                          TEMP = TEMP + CONJG(A(L,I))*A(L,J)
                      enddo
                      IF (BETA.EQ.ZERO) THEN
                          C(I,J) = ALPHA*TEMP
                      ELSE
                          C(I,J) = ALPHA*TEMP + BETA*C(I,J)
                      endif
                  enddo
              enddo
          endif
      endif
!
      END SUBROUTINE CHERK
